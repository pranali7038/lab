#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

// Definition of Job struct
struct Job {
    int id;     // Job ID
    int dead;   // Deadline of job
    int profit; // Profit if job is done before or on deadline
};

// Solution class implementing the Job Scheduling algorithm
class Solution {
    public:
    // Comparator function to sort jobs in descending order of profit
    static bool cmp(Job a, Job b) {
        return a.profit > b.profit;
    }
    
    // Function to find the maximum profit and the number of jobs done
    vector<int> JobScheduling(Job arr[], int n) { 
        // Sort jobs in descending order of profit
        sort(arr, arr + n, cmp);
        
        // Find the maximum deadline among all jobs
        int maxiDeadline = INT_MIN;
        for (int i = 0; i < n; i++) {
            maxiDeadline = max(maxiDeadline, arr[i].dead);
        }
        
        // Schedule array initialized to -1, representing unoccupied time slots
        vector<int> schedule(maxiDeadline + 1, -1);
        
        int count = 0;        // Number of jobs done
        int maxProfit = 0;    // Total profit from scheduled jobs
        
        // Iterate through all jobs
        for (int i = 0; i < n; i++) {
            int currProfit = arr[i].profit;
            int currJobId = arr[i].id;
            int currDead = arr[i].dead;
            
            // Try to schedule job at the latest possible time before its deadline
            for (int k = currDead; k > 0; k--) {
                if (schedule[k] == -1) { // Slot is available
                    count++;
                    maxProfit += currProfit;
                    schedule[k] = currJobId;
                    break;
                }
            }
        }
        
        // Return the number of jobs done and the total profit
        return {count, maxProfit};
    }
};

int main() {
    int n;
    cout << "Enter the number of jobs: ";
    cin >> n;
    
    Job arr[n];
    cout << "Enter the job details (ID, Deadline, Profit) for each job:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i].id >> arr[i].dead >> arr[i].profit;
    }
    
    Solution solution;
    vector<int> result = solution.JobScheduling(arr, n);
    
    cout << "Number of jobs done: " << result[0] << endl;
    cout << "Maximum profit: " << result[1] << endl;

    return 0;
}




/*

/tmp/UvUkCPosfe.o
Enter the number of jobs: 4
Enter the job details (ID, Deadline, Profit) for each job:
1 4 20
2 1 10
3 1 40
4 1 30
Number of jobs done: 2
Maximum profit: 60


TC - O(n^2)
=== Code Execution Successful ===

*/