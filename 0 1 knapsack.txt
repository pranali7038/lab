#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// The recursive 0-1 knapsack function you provided
int solve(vector<int> &weight, vector<int> &value, int index, int W) {
    // Base case: if only one item to consider
    if (index == 0) {
        if (weight[0] <= W)
            return value[0];
        else
            return 0;
    }

    int include = 0;
    if (weight[index] <= W)
        include = value[index] + solve(weight, value, index - 1, W - weight[index]);

    int exclude = 0 + solve(weight, value, index - 1, W);

    return max(exclude, include);
}

int main() {
    int n, W;
    cout << "Enter the number of items: ";
    cin >> n;
    
    cout << "Enter the maximum capacity of the knapsack: ";
    cin >> W;
    
    vector<int> weight(n), value(n);
    
    cout << "Enter the weights of the items: ";
    for (int i = 0; i < n; i++) {
        cin >> weight[i];
    }
    
    cout << "Enter the values of the items: ";
    for (int i = 0; i < n; i++) {
        cin >> value[i];
    }

    // Call the solve function with the last index and max capacity W
    int max_value = solve(weight, value, n - 1, W);
    cout << "The maximum value that can be achieved in the knapsack is: " << max_value << endl;

    return 0;
}


/*

Enter the number of items: 3
Enter the maximum capacity of the knapsack: 50
Enter the weights of the items: 10 20 30
Enter the values of the items: 60 100 120

TC -o(2^n)
SC - o(n)
*/
